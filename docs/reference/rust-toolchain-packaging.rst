Updating rustc and cargo in Ubuntu
==================================

Scope
-----

We maintain rustc and cargo in Ubuntu almost entirely to support building other Rust applications in the Ubuntu archive.
If you're a Rust application developer looking to work on your own Rust programs,
you are probably going to have a better experience using the rustup Snap.

Introduction
------------

Rust toolchain has been somewhat a complicated package in Ubuntu due to how we diverge the maintenance model from Debian.
We occasionally merge the changes from Debian, but for the most part, we update the toolchain at our own pace.

Due to how Rust upstream structures the source files, we also will need to patch or remove third-party library source files
to reduce the source package size and also reduce the potential security risks (e.g. supply-chain attacks). These steps will
be explained below for your reference.

Packaging a new update from Rust upstream
-----------------------------------------

You probably are already familiar with ``uscan`` and friends, Rust source package still uses ``uscan`` to update the source files.
Before that, you will need to remove the ``# DO NOT EDIT below, AUTOGENERATED`` chunk from the ``debian/copyright`` file.
The reason for that is in order to clean up unwanted files, we will first know what the full source directory looks like and figure
out which files need to be removed.

After removing the chunk, you will need to run ``dch -v <new_upstream_version>+dfsg0ubuntu0-0ubuntu0``.
You will need to replace ``<new_upstream_version>`` with the actual Rust upstream version number like ``1.82.0`` to proceed.
The version number looks somewhat unpleasant, but this is the necessary evil to be compliant with
the `Ubuntu version number policy <_version_string_policy>`_.

Then, you can run the ``uscan --download-version <new_upstream_version> -v`` to download and repack the source files.
Watch for any warnings printed out by ``uscan`` and act accordingly. If there are files not properly excluded, you will
need to note them down and see if they got renamed or moved around in the following steps.

After the source files are downloaded and repacked, you can proceed to use ``gbp`` to import the new version into a new
Git branch named ``merged-<new_upstream_version_X.Y>`` and replace the ``<new_upstream_version_X.Y>`` part with the
actual major.minor version format of the Rust upstream version, like ``1.82`` if your full version is ``1.82.0``.
We don't use pristine-tar for this repository because the source files are too large.

When importing the source archive, you might want to use the following:

.. code-block:: bash

    gbp import-orig --no-symlink-orig --no-pristine-tar --upstream-branch=experimental \
        --debian-branch=merge-<version_X.Y> ../rustc-<version_X.Y>_<version>+dfsg0ubuntu0.orig.tar.xz

After that, you will need to fix the patches in ``debian/patches`` so that they will still apply.
You can either use ``quilt`` or ``gbp pq`` to rebuild the patches.

After the patches are fixed, you will need to update the version number in ``debian/changelog`` and
then re-scan the ``vendor`` directory to see if there are non-Linux libraries to be removed. You might have already
done this when fixing the patches. Then you will need to run ``debian/prune-unused-deps`` to update the ``debian/copyright``
file with the new exclusion information. Be sure to check that all the ``windows-*`` files are on that list. You can also use
`a more advanced tool <_ubuntu_rust_tool>`_ to automate this process (use the ``clean-vendor``)
sub-command.

After updating ``debian/copyright`` file, you need to re-run the ``uscan`` command to generate a new source archive with
all the unneeded files yanked out. The new source archive should bear the ``<new_upstream_version>+dfsg0ubuntu1``
version number. Then you can remove the ``<new_upstream_version>+dfsg0ubuntu0-0ubuntu0`` version from your disk.

When the new source archive is generated, you will need to rebase your Git tree to remove the previous ``gbp`` import commits
and tags so that you can import the new archive cleanly. Make sure to also rebase the ``experimental`` branch to remove the
base import commits as well.

After cleaning up the branches, you will need to fix your patches again, because many files may now not exist.

Then you will need to update ``debian/copyright`` with new copyright data for the new files in ``vendor`` directory.
You can do it manually, but this is not recommended, as this is a repetitive and boring task.
The other option is to run Lintian and pipe its output to `debian/lintian-to-copyright.sh`, or you can use
`a more advanced tool <_ubuntu_rust_tool>`_  (use the ``copyright`` sub-command).

Finally you can test build the package locally or in a PPA.

.. _ubuntu_rust_tool: https://launchpad.net/~liushuyu-011/+git/ubuntu-rust-tool
.. _version_string_policy: https://github.com/canonical/ubuntu-maintainers-handbook/blob/main/VersionStrings.md
